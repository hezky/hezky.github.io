const CACHE_NAME="sw-edu-app-v1",RUNTIME_CACHE="sw-edu-runtime-v1",STATIC_ASSETS=["/","/index.html","/manifest.json"];async function cacheFirstStrategy(e){try{const t=await caches.match(e);if(t)return console.log("[SW] Cache hit:",e.url),t;console.log("[SW] Cache miss, fetching:",e.url);const a=await fetch(e);return a&&200===a.status&&(await caches.open(RUNTIME_CACHE)).put(e,a.clone()),a}catch(e){return console.error("[SW] Cache first strategy failed:",e),new Response("Offline - Resource not available",{status:503,statusText:"Service Unavailable",headers:new Headers({"Content-Type":"text/plain"})})}}async function networkFirstStrategy(e){try{console.log("[SW] Network first attempt:",e.url);const t=await fetch(e);return t&&200===t.status&&(await caches.open(CACHE_NAME)).put(e,t.clone()),t}catch(t){console.log("[SW] Network failed, trying cache:",e.url);const a=await caches.match(e);return a?(console.log("[SW] Serving from cache (offline):",e.url),a):(console.error("[SW] Both network and cache failed:",t),new Response("Offline - Page not cached",{status:503,statusText:"Service Unavailable",headers:new Headers({"Content-Type":"text/html"})}))}}self.addEventListener("install",e=>{console.log("[SW] Install event"),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("[SW] Caching static assets"),e.addAll(STATIC_ASSETS))).then(()=>(console.log("[SW] Static assets cached successfully"),self.skipWaiting())).catch(e=>{console.error("[SW] Failed to cache static assets:",e)}))}),self.addEventListener("activate",e=>{console.log("[SW] Activate event"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME&&e!==RUNTIME_CACHE)return console.log("[SW] Deleting old cache:",e),caches.delete(e)}))).then(()=>(console.log("[SW] Old caches cleaned up"),self.clients.claim())))}),self.addEventListener("fetch",e=>{const{request:t}=e,a=new URL(t.url);a.protocol.startsWith("http")&&a.origin===self.location.origin&&("document"===t.destination?e.respondWith(networkFirstStrategy(t)):e.respondWith(cacheFirstStrategy(t)))}),self.addEventListener("message",e=>{if(console.log("[SW] Message received:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CACHE_URLS"===e.data.type){const t=e.data.urls;e.waitUntil(caches.open(RUNTIME_CACHE).then(e=>e.addAll(t)).then(()=>{console.log("[SW] URLs cached on demand:",t)}))}}),self.addEventListener("error",e=>{console.error("[SW] Error:",e.error)}),self.addEventListener("unhandledrejection",e=>{console.error("[SW] Unhandled rejection:",e.reason)}),console.log("[SW] Service Worker loaded");