{
  "id": "article-001",
  "title": "Úvod do Reactu - Základy a koncepty",
  "title.en": "Introduction to React - Basics and Concepts",
  "date": "2025-07-19",
  "description": "Objevte sílu Reactu - moderní JavaScript knihovny pro vytváření interaktivních uživatelských rozhraní. Naučte se základní koncepty jako komponenty, JSX, state a props.",
  "description.en": "Discover the power of React - a modern JavaScript library for building interactive user interfaces. Learn basic concepts like components, JSX, state and props.",
  "tags": ["React", "JavaScript", "Frontend"],
  "category": "framework",
  "markdown": "# Úvod do Reactu - Základy a koncepty\n\nReact je populární JavaScript knihovna pro vytváření uživatelských rozhraní. Byla vyvinuta společností Facebook a v současnosti je jednou z nejpoužívanějších technologií pro vývoj moderních webových aplikací.\n\n## Co je React?\n\nReact je deklarativní, efektivní a flexibilní JavaScript knihovna pro vytváření uživatelských rozhraní. Umožňuje vytvářet komplexní UI z malých izolovaných částí kódu nazývaných **komponenty**.\n\n## Klíčové koncepty\n\n### 1. Komponenty\n\nKomponenty jsou základními stavebními bloky React aplikací. Každá komponenta je samostatná jednotka, která může obsahovat vlastní stav a logiku.\n\n```jsx\nfunction Welcome(props) {\n  return <h1>Ahoj, {props.name}!</h1>;\n}\n```\n\n### 2. JSX\n\nJSX je syntaktické rozšíření JavaScriptu, které vypadá podobně jako HTML. Umožňuje psát strukturu UI přímo v JavaScriptu.\n\n```jsx\nconst element = (\n  <div className=\"container\">\n    <h1>Vítejte v Reactu</h1>\n    <p>Toto je JSX syntaxe</p>\n  </div>\n);\n```\n\n### 3. State a Props\n\n- **Props** jsou data předávaná komponentě z nadřazené komponenty\n- **State** je lokální stav komponenty, který se může měnit v čase\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Počet: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Přidat\n      </button>\n    </div>\n  );\n}\n```\n\n### 4. Hooks\n\nHooks jsou funkce, které umožňují používat state a další React funkce ve funkčních komponentách:\n\n- `useState` - pro správu lokálního stavu\n- `useEffect` - pro side efekty\n- `useContext` - pro přístup ke kontextu\n- `useMemo` - pro memoizaci hodnot\n- `useCallback` - pro memoizaci funkcí\n\n## Virtual DOM\n\nReact používá koncept Virtual DOM pro efektivní aktualizace UI. Místo přímé manipulace s DOM vytváří virtuální reprezentaci a provádí pouze nezbytné změny.\n\n## Výhody Reactu\n\n1. **Znovupoužitelnost komponent** - komponenty lze používat na více místech\n2. **Jednosměrný tok dat** - data proudí shora dolů, což usnadňuje debugging\n3. **Velká komunita** - rozsáhlá dokumentace a mnoho knihoven třetích stran\n4. **React Native** - možnost vyvíjet mobilní aplikace stejnou technologií\n\n## Závěr\n\nReact je mocný nástroj pro vytváření moderních webových aplikací. Jeho komponentový přístup a efektivní rendering činí vývoj UI intuitivním a škálovatelným.",
  "markdown.en": "# Introduction to React - Basics and Concepts\n\nReact is a popular JavaScript library for building user interfaces. It was developed by Facebook and is currently one of the most widely used technologies for developing modern web applications.\n\n## What is React?\n\nReact is a declarative, efficient, and flexible JavaScript library for building user interfaces. It allows you to build complex UIs from small isolated pieces of code called **components**.\n\n## Key Concepts\n\n### 1. Components\n\nComponents are the fundamental building blocks of React applications. Each component is a self-contained unit that can contain its own state and logic.\n\n```jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n```\n\n### 2. JSX\n\nJSX is a syntax extension of JavaScript that looks similar to HTML. It allows you to write UI structure directly in JavaScript.\n\n```jsx\nconst element = (\n  <div className=\"container\">\n    <h1>Welcome to React</h1>\n    <p>This is JSX syntax</p>\n  </div>\n);\n```\n\n### 3. State and Props\n\n- **Props** are data passed to a component from its parent component\n- **State** is the local state of a component that can change over time\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Add\n      </button>\n    </div>\n  );\n}\n```\n\n### 4. Hooks\n\nHooks are functions that allow you to use state and other React features in functional components:\n\n- `useState` - for managing local state\n- `useEffect` - for side effects\n- `useContext` - for accessing context\n- `useMemo` - for memoizing values\n- `useCallback` - for memoizing functions\n\n## Virtual DOM\n\nReact uses the Virtual DOM concept for efficient UI updates. Instead of directly manipulating the DOM, it creates a virtual representation and makes only the necessary changes.\n\n## Benefits of React\n\n1. **Component reusability** - components can be used in multiple places\n2. **Unidirectional data flow** - data flows from top to bottom, making debugging easier\n3. **Large community** - extensive documentation and many third-party libraries\n4. **React Native** - ability to develop mobile applications with the same technology\n\n## Conclusion\n\nReact is a powerful tool for building modern web applications. Its component-based approach and efficient rendering make UI development intuitive and scalable.",
  "metadata": {
    "author": "David Hezký",
    "readingTime": "5 min"
  }
}