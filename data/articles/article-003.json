{
  "id": "article-003",
  "title": "JavaScript Async/Await - Asynchronní programování",
  "date": "2025-07-17",
  "description": "Pochopte asynchronní programování v JavaScriptu. Naučte se pracovat s promises, async/await a zvládněte zpracování chyb.",
  "tags": ["JavaScript", "Async", "Backend"],
  "category": "javascript",
  "markdown": "# JavaScript Async/Await - Asynchronní programování\n\nAsync/Await je moderní způsob práce s asynchronním kódem v JavaScriptu. Představuje syntaktický cukr nad Promise API, který činí asynchronní kód čitelnějším.\n\n## Co je to Async/Await?\n\nAsync/Await umožňuje psát asynchronní kód, který vypadá jako synchronní:\n\n```javascript\n// Tradiční Promise\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n\n// S Async/Await\nasync function fetchData() {\n  try {\n    const response = await fetch('/api/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n## Async funkce\n\nKlíčové slovo `async` před funkcí říká, že funkce vrací Promise:\n\n```javascript\nasync function greet() {\n  return 'Ahoj!';\n}\n\n// Je to stejné jako:\nfunction greet() {\n  return Promise.resolve('Ahoj!');\n}\n```\n\n## Await operátor\n\n`await` pozastaví vykonávání async funkce a počká na vyřešení Promise:\n\n```javascript\nasync function processUser(userId) {\n  const user = await fetchUser(userId);\n  const posts = await fetchUserPosts(user.id);\n  const comments = await fetchPostComments(posts[0].id);\n  \n  return { user, posts, comments };\n}\n```\n\n## Error Handling\n\n### Try-Catch bloky\n\n```javascript\nasync function safeOperation() {\n  try {\n    const result = await riskyOperation();\n    return result;\n  } catch (error) {\n    console.error('Operace selhala:', error);\n    return null;\n  }\n}\n```\n\n### Kombinace s .catch()\n\n```javascript\nasync function getData() {\n  const data = await fetch('/api/data')\n    .catch(err => {\n      console.error('Fetch failed:', err);\n      return null;\n    });\n  \n  return data;\n}\n```\n\n## Paralelní zpracování\n\n### Promise.all\n\n```javascript\nasync function fetchAllData() {\n  const [users, posts, comments] = await Promise.all([\n    fetch('/api/users'),\n    fetch('/api/posts'),\n    fetch('/api/comments')\n  ]);\n  \n  return {\n    users: await users.json(),\n    posts: await posts.json(),\n    comments: await comments.json()\n  };\n}\n```\n\n### Promise.allSettled\n\n```javascript\nasync function fetchMultiple(urls) {\n  const results = await Promise.allSettled(\n    urls.map(url => fetch(url))\n  );\n  \n  return results.map(result => {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      console.error('Failed:', result.reason);\n      return null;\n    }\n  });\n}\n```\n\n## Praktické příklady\n\n### Retry logika\n\n```javascript\nasync function fetchWithRetry(url, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url);\n      if (response.ok) return response;\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n    }\n  }\n}\n```\n\n### Timeout implementace\n\n```javascript\nfunction timeout(ms) {\n  return new Promise((_, reject) => \n    setTimeout(() => reject(new Error('Timeout')), ms)\n  );\n}\n\nasync function fetchWithTimeout(url, ms = 5000) {\n  const response = await Promise.race([\n    fetch(url),\n    timeout(ms)\n  ]);\n  \n  return response;\n}\n```\n\n## Best Practices\n\n1. **Vždy používejte try-catch** pro error handling\n2. **Paralelizujte kde můžete** - neblokujte zbytečně\n3. **Async iterátory** pro zpracování streamů\n4. **Top-level await** v moderních prostředích\n5. **Kombinujte s Promise API** pro komplexní scénáře\n\n## Časté chyby\n\n```javascript\n// ❌ Zapomenutý await\nasync function bad() {\n  const data = fetch('/api/data'); // Vrací Promise, ne data!\n}\n\n// ❌ Await v běžné funkci\nfunction regular() {\n  const data = await fetch('/api/data'); // SyntaxError!\n}\n\n// ❌ Sekvenční místo paralelní\nasync function slow() {\n  const a = await fetchA(); // 1s\n  const b = await fetchB(); // 1s\n  return [a, b]; // Celkem 2s\n}\n\n// ✅ Paralelní zpracování\nasync function fast() {\n  const [a, b] = await Promise.all([\n    fetchA(),\n    fetchB()\n  ]); // Celkem 1s\n  return [a, b];\n}\n```\n\n## Závěr\n\nAsync/Await dramaticky zlepšuje čitelnost asynchronního kódu. Je to nezbytný nástroj pro moderní JavaScript development.",
  "metadata": {
    "author": "David Hezký",
    "readingTime": "6 min"
  }
}